name: release:create-release

on:
  workflow_call:
    inputs:
      binary_name: 
        type: string
        required: true
        description: 'Binary name(s) separated by space'
      tuf_repo:
        type: string
        required: true
        description: 'Path to binary download in release notes'
      pgp_key_urls:
        type: string
        required: true
        description: 'PGP key URL(s) separated by space'
    secrets:
      TOKEN:
        required: true

env:
  GH_TOKEN: ${{ secrets.TOKEN }}

jobs:
  create-release:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Get version from CHANGELOG.md
        id: get_version
        run: |
          VERSION=$(grep -m1 '^#\+ \[[0-9]\+\.[0-9]\+\.[0-9]\+\]' CHANGELOG.md | sed -E 's/^#+ \[([0-9]+\.[0-9]+\.[0-9]+)\].*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate notes.md
        id: notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          BINARY_NAMES="${{ inputs.binary_name }}"
          TUF_REPO="${{ inputs.tuf_repo }}"
          PGP_KEY_URLS="${{ inputs.pgp_key_urls }}"
          
          echo "## Changelog" > notes.md
          awk -v version="$VERSION" '
            $0 ~ "^#+ \\[" version "\\]" {capture=1; next}
            capture && $0 ~ "^#+ \\[" && $0 !~ "^#+ \\[" version "\\]" {exit}
            capture {print}
          ' CHANGELOG.md >> notes.md

          echo -e "\n## Installation" >> notes.md
          echo "To install the following binaries we strongly recommend following [these instructions](https://werf.io/getting_started/)." >> notes.md
          
          for BINARY_NAME in $BINARY_NAMES; do
            cat <<EOF >> notes.md
          You can download \`$BINARY_NAME\` binaries from here:
          * [Linux amd64](https://$TUF_REPO/targets/releases/$VERSION/linux-amd64/bin/$BINARY_NAME) ([PGP signature](https://$TUF_REPO/targets/signatures/$VERSION/linux-amd64/bin/$BINARY_NAME.sig))
          * [Linux arm64](https://$TUF_REPO/targets/releases/$VERSION/linux-arm64/bin/$BINARY_NAME) ([PGP signature](https://$TUF_REPO/targets/signatures/$VERSION/linux-arm64/bin/$BINARY_NAME.sig))
          * [macOS amd64](https://$TUF_REPO/targets/releases/$VERSION/darwin-amd64/bin/$BINARY_NAME) ([PGP signature](https://$TUF_REPO/targets/signatures/$VERSION/darwin-amd64/bin/$BINARY_NAME.sig))
          * [macOS arm64](https://$TUF_REPO/targets/releases/$VERSION/darwin-arm64/bin/$BINARY_NAME) ([PGP signature](https://$TUF_REPO/targets/signatures/$VERSION/darwin-arm64/bin/$BINARY_NAME.sig))
          * [Windows amd64](https://$TUF_REPO/targets/releases/$VERSION/windows-amd64/bin/$BINARY_NAME.exe) ([PGP signature](https://$TUF_REPO/targets/signatures/$VERSION/windows-amd64/bin/$BINARY_NAME.exe.sig))
          EOF
            echo -e "\nThese binaries were signed with PGP and could be verified on Linux with these commands:\n\`\`\`shell" >> notes.md
            for PGP_URL in $PGP_KEY_URLS; do
              echo "curl -sSL $PGP_URL | gpg --import" >> notes.md
            done
            cat <<EOF >> notes.md
          curl -sSLO "https://$TUF_REPO/targets/releases/$VERSION/linux-amd64/bin/$BINARY_NAME"
          curl -sSLO "https://$TUF_REPO/targets/signatures/$VERSION/linux-amd64/bin/$BINARY_NAME.sig"
          gpg --verify $BINARY_NAME.sig $BINARY_NAME
          \`\`\`
          EOF
          done
      
      - name: Create release
        run: |
          gh release create "v${{ steps.get_version.outputs.version }}" \
            --title "v${{ steps.get_version.outputs.version }}" \
            --prerelease \
            --notes-file notes.md